## example usage
## model = lm(y ~ x)
## se = lm_se(model)
##
lm_se = function(model)
{
return ( sqrt(diag(vcov(model))) )
}
summary(lm_se(fit_for_problem_4))
summary(fit_for_problem_4)
## example usage
## model = lm(y ~ x)
## se = lm_se(model)
##
lm_se = function(model)
{
return ( sqrt(diag(vcov(model))) )
}
summary(fit_for_problem_4)
knitr::opts_chunk$set(echo = TRUE, message=FALSE, error = TRUE, fig.height = 4)
library(tidyverse)
library(lubridate)
library(modelr)
source("../../scripts/viridis.R")
source("../../scripts/ggprob.R")
## example usage
## model = lm(y ~ x)
## se = lm_se(model)
##
lm_se = function(model)
{
return ( sqrt(diag(vcov(model))) )
}
summary(fit_for_problem_4)
qt(fit_for_problem_4)
knitr::opts_chunk$set(echo = TRUE, message=FALSE, error = TRUE, fig.height = 4)
library(tidyverse)
library(lubridate)
library(modelr)
source("../../scripts/viridis.R")
source("../../scripts/ggprob.R")
monona = read_csv("../../data/lake-monona-winters-2022.csv") %>%
mutate(y = ff_x - 153) %>%
select(winter, year1, first_freeze, y)
ggplot(monona, aes(x = year1, y = y)) +
geom_point() +
geom_smooth(method = "lm", se = FALSE) +
xlab("Winter (first year)") +
ylab("First Freeze Days After Nov. 30")
fit_for_problem_4 = lm(y ~ year1, data = monona)
fit_for_problem_4$coefficients
monona = monona %>%
add_residuals(fit_for_problem_4) %>%
add_predictions(fit_for_problem_4)
ggplot(monona, aes(year1, resid)) +
geom_point() + geom_smooth(se = FALSE)
## example usage
## model = lm(y ~ x)
## se = lm_se(model)
##
lm_se = function(model)
{
return ( sqrt(diag(vcov(model))) )
}
summary(fit_for_problem_4)
qt(fit_for_problem_4)
## example usage
## model = lm(y ~ x)
## se = lm_se(model)
##
lm_se = function(model)
{
return ( sqrt(diag(vcov(model))) )
}
summary(fit_for_problem_4)
qt(df  = fit_for_problem_4)
## example usage
## model = lm(y ~ x)
## se = lm_se(model)
##
lm_se = function(model)
{
return ( sqrt(diag(vcov(model))) )
}
summary(fit_for_problem_4)
est = 0.07587
se = 0.01782
t = 4.257
est + c(-t*se, t*se)
## example usage
## model = lm(y ~ x)
## se = lm_se(model)
##
lm_se = function(model)
{
return ( sqrt(diag(vcov(model))) )
}
summary(fit_for_problem_4)
est = 0.07587
se = 0.01782
t = qt(0.95, fit_for_problem_4)
est + c(-t*se, t*se)
## example usage
## model = lm(y ~ x)
## se = lm_se(model)
##
lm_se = function(model)
{
return ( sqrt(diag(vcov(model))) )
}
summary(fit_for_problem_4)
est = 0.07587
se = 0.01782
t = qt(0.95, df = fit_for_problem_4)
est + c(-t*se, t*se)
## example usage
## model = lm(y ~ x)
## se = lm_se(model)
##
lm_se = function(model)
{
return ( sqrt(diag(vcov(model))) )
}
summary(fit_for_problem_4)
est = 0.07587
se = 0.01782
t = qt(95, df = fit_for_problem_4)
est + c(-t*se, t*se)
## example usage
## model = lm(y ~ x)
## se = lm_se(model)
##
lm_se = function(model)
{
return ( sqrt(diag(vcov(model))) )
}
summary(fit_for_problem_4)
est = 0.07587
se = 0.01782
t = qt(0.95, fit_for_problem_4)
est + c(-t*se, t*se)
## example usage
## model = lm(y ~ x)
## se = lm_se(model)
##
lm_se = function(model)
{
return ( sqrt(diag(vcov(model))) )
}
summary(fit_for_problem_4)
est = 0.07587
se = 0.01782
t = qt(0.95, monona)
est + c(-t*se, t*se)
## example usage
## model = lm(y ~ x)
## se = lm_se(model)
##
lm_se = function(model)
{
return ( sqrt(diag(vcov(model))) )
}
summary(fit_for_problem_4)
est = 0.07587
se = 0.01782
t = qt(0.95)
est + c(-t*se, t*se)
## example usage
## model = lm(y ~ x)
## se = lm_se(model)
##
lm_se = function(model)
{
return ( sqrt(diag(vcov(model))) )
}
summary(fit_for_problem_4)
est = 0.07587
se = 0.01782
t = qt(0.95, 2)
est + c(-t*se, t*se)
## example usage
## model = lm(y ~ x)
## se = lm_se(model)
##
lm_se = function(model)
{
return ( sqrt(diag(vcov(model))) )
}
summary(fit_for_problem_4)
est = 0.07587
se = 0.01782
t = qt(0.95 165)
est + c(-t*se, t*se)
## example usage
## model = lm(y ~ x)
## se = lm_se(model)
##
lm_se = function(model)
{
return ( sqrt(diag(vcov(model))) )
}
summary(fit_for_problem_4)
est = 0.07587
se = 0.01782
t = qt(0.95, 165)
est + c(-t*se, t*se)
## example usage
## model = lm(y ~ x)
## se = lm_se(model)
##
lm_se = function(model)
{
return ( sqrt(diag(vcov(model))) )
}
summary(fit_for_problem_4)
est = 0.07587
se = 0.01782
t = qt(0.95, 2)
est + c(-t*se, t*se)
## example usage
## model = lm(y ~ x)
## se = lm_se(model)
##
lm_se = function(model)
{
return ( sqrt(diag(vcov(model))) )
}
summary(fit_for_problem_4)
est = 0.07587
se = 0.01782
t = qt(95, 2 )
est + c(-t*se, t*se)
View(monona)
## example usage
## model = lm(y ~ x)
## se = lm_se(model)
##
lm_se = function(model)
{
return ( sqrt(diag(vcov(model))) )
}
summary(fit_for_problem_4)
est = 0.07587
se = 0.01782
t = qt(0.95, count(monona) -2 )
est + c(-t*se, t*se)
## example usage
## model = lm(y ~ x)
## se = lm_se(model)
##
lm_se = function(model)
{
return ( sqrt(diag(vcov(model))) )
}
summary(fit_for_problem_4)
est = 0.07587
se = 0.01782
t = qt(0.95, length(monona) -2 )
est + c(-t*se, t*se)
## example usage
## model = lm(y ~ x)
## se = lm_se(model)
##
lm_se = function(model)
{
return ( sqrt(diag(vcov(model))) )
}
summary(fit_for_problem_4)
est = 0.07587
se = 0.01782
t = qt(0.95, 165)
est + c(-t*se, t*se)
## example usage
## model = lm(y ~ x)
## se = lm_se(model)
##
lm_se = function(model)
{
return ( sqrt(diag(vcov(model))) )
}
summary(fit_for_problem_4)
est = 0.07587
se = 0.01782
t = qt(0.95, 165)
est + (c(-t*se, t*se))
## example usage
## model = lm(y ~ x)
## se = lm_se(model)
##
lm_se = function(model)
{
return ( sqrt(diag(vcov(model))) )
}
summary(fit_for_problem_4)
est = 0.07587
se = 0.01782
t = qt(0.95, 165)
t
est + (c(-t*se, t*se))
## example usage
## model = lm(y ~ x)
## se = lm_se(model)
##
lm_se = function(model)
{
return ( sqrt(diag(vcov(model))) )
}
summary(fit_for_problem_4)
est = 0.07587
se = 0.01782
t = qt(0.95, 165)
t*se
est + (c(-t*se, t*se))
## example usage
## model = lm(y ~ x)
## se = lm_se(model)
##
lm_se = function(model)
{
return ( sqrt(diag(vcov(model))) )
}
summary(fit_for_problem_4)
est = 0.07587
se = 0.01782
t = qt(0.95, 165)
-t*se
est + (c(-t*se, t*se))
## example usage
## model = lm(y ~ x)
## se = lm_se(model)
##
lm_se = function(model)
{
return ( sqrt(diag(vcov(model))) )
}
summary(fit_for_problem_4)
est = 0.07587
se = 0.01782
t = qt(0.95, 165)
-t*se + est
est + (c(-t*se, t*se))
## example usage
## model = lm(y ~ x)
## se = lm_se(model)
##
lm_se = function(model)
{
return ( sqrt(diag(vcov(model))) )
}
summary(fit_for_problem_4)
est = 0.07587
se = 0.01782
t = qt(0.95, 165)
t*se + est
est + (c(-t*se, t*se))
## example usage
## model = lm(y ~ x)
## se = lm_se(model)
##
lm_se = function(model)
{
return ( sqrt(diag(vcov(model))) )
}
summary(fit_for_problem_4)
est = 0.07587
se = 0.01782
t = qt(0.95, 165)
est + (c(-t*se, t*se))
## confidence interval using predict()
new_data = tibble(
year1 = 2022
)
predict(fit_for_problem_4, new_data, interval = "confidence") %>%
round(digits = 1)
## confidence interval using predict()
new_data = tibble(
year1 = 2022
)
predict(fit_for_problem_4, new_data, interval = "confidence") %>%
round(digits = 1)
View(fit_for_problem_4)
View(fit_for_problem_4)
View(new_data)
View(monona)
View(fit_for_problem_4)
View(new_data)
View(monona)
View(monona)
ggplot(monona, aes(year1, y))
ggplot(monona, aes(year1, y)) +
geom_point()
ggplot(monona, aes(year1, y)) +
geom_point() +
geom_smooth()
ggplot(monona, aes(year1, first_freeze)) +
geom_point() +
geom_smooth()
ggplot(monona, aes(year1, y)) +
geom_point() +
geom_smooth()
## confidence interval using predict()
new_data = tibble(
year1 = 2022
)
predict(fit_for_problem_4, new_data, interval = "confidence") %>%
round(digits = 1)
predict(fit_for_problem_4, new_data, interval = "prediction") %>%
round(digits = 1)
full_prediction = predict(fit_for_problem_4, monona, interval = "prediction") %>%
as_tibble()
monona = monona %>%
mutate(pred_lwr = full_prediction$lwr,
pred_upr = full_prediction$upr)
ggplot(monona, aes(x = year1, y = y)) +
geom_ribbon(aes(ymin = pred_lwr, ymax = pred_upr), alpha = 0.2, fill = "blue") +
geom_point() +
geom_smooth(method = "lm", se = FALSE) +
geom_vline(xintercept = 2022, color = "red") +
xlab("Winter (first year)") +
ylab("First Freeze Days After Nov. 30")
data = read_csv("fixed_data.csv")
data = read.csv("fixed_data.csv")
library(tidyverse)
library(ggplot2)
library(tidyverse)
data = read_csv("fixed_data.csv")
View(data)
View(data)
ggplot(data, aes(Name, Tests)) +
geom_bar()
ggplot(data, aes(Name, Tests)) +
geom_col()
top_10_tests = data %>%
slice_max(tests, 10)
top_10_tests = data %>%
slice_max(n= 10)
top_10_tests = data %>%
slice_max(Tests, n= 10)
library(tidyverse)
data = read_csv("fixed_data.csv")
top_10_tests = data %>%
slice_max(Tests, n= 10)
View(top_10_tests)
knitr::opts_chunk$set(echo = FALSE, warning = FALSE, message = FALSE)
library(tidyverse)
library(lubridate)
library(ggrepel)
install.packages('ggrepel')
knitr::opts_chunk$set(echo = FALSE, warning = FALSE, message = FALSE)
library(tidyverse)
library(lubridate)
library(ggrepel)
library(forcats)
library(gtExtras)
install.packages('gtExtras')
install.packages("gtExtras")
install.packages("gtExtras")
install.packages('gtExtras')
install.packages("gtExtras")
knitr::opts_chunk$set(echo = FALSE, warning = FALSE, message = FALSE)
library(tidyverse)
setwd("~/Personal/mlb/gamelogs")
knitr::opts_chunk$set(echo = TRUE,message=FALSE)
library(tidyverse)
knitr::opts_chunk$set(echo = TRUE,message=FALSE)
library(tidyverse)
game_data = read_csv("./csv/gl2022.csv")
View(game_data)
game_data = read_csv("./csv/gl2022.csv")
game_log_header = read_csv("https://raw.githubusercontent.com/maxtoki/baseball_R/master/data/game_log_header.csv")
View(game_log_header)
game_data = read_csv("./csv/gl2022.csv", header=FALSE)
game_data = read_csv("./csv/gl2022.csv", col_names = FALSE)
game_log_header = read_csv("https://raw.githubusercontent.com/maxtoki/baseball_R/master/data/game_log_header.csv")
View(game_data)
View(game_log_header)
game_data = read_csv("./csv/gl2022.csv", col_names = FALSE)
game_log_header = read_csv("https://raw.githubusercontent.com/maxtoki/baseball_R/master/data/game_log_header.csv", col_names = FALSE)
View(game_log_header)
game_data = read_csv("./csv/gl2022.csv", col_names = FALSE)
game_log_header = read_csv("https://raw.githubusercontent.com/maxtoki/baseball_R/master/data/game_log_header.csv", col_names = FALSE)
col_names(game_data) = game_log_header
game_data = read_csv("./csv/gl2022.csv", col_names = FALSE)
game_log_header = read_csv("https://raw.githubusercontent.com/maxtoki/baseball_R/master/data/game_log_header.csv", col_names = FALSE)
col_names(game_data) <- game_log_header
game_data = read_csv("./csv/gl2022.csv", col_names = FALSE)
game_log_header = read_csv("https://raw.githubusercontent.com/maxtoki/baseball_R/master/data/game_log_header.csv", col_names = FALSE)
colnames(game_data) = game_log_header
View(game_data)
game_data = read_csv("./csv/gl2022.csv", col_names = FALSE)
game_log_header = read_csv("https://raw.githubusercontent.com/maxtoki/baseball_R/master/data/game_log_header.csv")
colnames(game_data) = game_log_header
library(tidyverse)
game_data = read_csv("./csv/gl2022.csv", col_names = FALSE)
game_log_header = read_csv("https://raw.githubusercontent.com/maxtoki/baseball_R/master/data/game_log_header.csv")
colnames(game_data) = game_log_header
View(game_data)
game_data = read_csv("./csv/gl2022.csv", col_names = FALSE)
game_log_header = read_csv("https://raw.githubusercontent.com/maxtoki/baseball_R/master/data/game_log_header.csv", col_names = FALSE)
colnames(game_data) = game_log_header
View(game_data)
View(game_log_header)
knitr::opts_chunk$set(echo = TRUE,message=FALSE)
knitr::opts_chunk$set(echo = TRUE,message=FALSE)
library(tidyverse)
View(game_data)
knitr::opts_chunk$set(echo = TRUE,message=FALSE)
library(tidyverse)
data_q1 = game_data %>%
select(Date, VisitingTeam, VisitingTeamLeague, HomeTeam, HomeTeamLeague, VisitorRunsScored, HomeRunsScore)
View(data_q1)
View(data_q1)
