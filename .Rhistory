return(mean(new_before) - mean(new_after))
}
NMC = 1e4
tests = rep(0, NMC)
for (i in 1:NMC) {
tests[i] = shuffle()
}
hist(tests)
abline( v=observed, lw=3, col='red' )
# Write a function to reshuffle the data, and produce a difference in means
observed = mean(before) - mean(after)
shuffle = function() {
l_before = length(before)
l_after = length(after)
l_tot = l_before + l_after
both = c(before, after)
shuffled = sample(both, size=l_tot, replace = FALSE)
new_before = shuffled[1:l_before]
new_after = shuffled[(l_before + 1): l_tot]
return(mean(new_before) - mean(new_after))
}
NMC = 1e4
tests = rep(0, NMC)
for (i in 1:NMC) {
tests[i] = shuffle()
}
hist(tests)
abline( v=observed, lw=3, col='red' )
# Write a function to reshuffle the data, and produce a difference in means
observed = mean(before) - mean(after)
shuffle = function() {
l_before = length(before)
l_after = length(after)
l_tot = l_before + l_after
both = c(before, after)
shuffled = sample(both, size=l_tot, replace = FALSE)
new_before = shuffled[1:l_before]
new_after = shuffled[(l_before + 1): l_tot]
return(mean(new_before) - mean(new_after))
}
NMC = 1e4
tests = rep(0, NMC)
for (i in 1:NMC) {
tests[i] = shuffle()
}
hist(tests)
abline( v=observed, lw=3, col='red' )
# Write a function to reshuffle the data, and produce a difference in means
observed = mean(before) - mean(after)
shuffle = function() {
l_before = length(before)
l_after = length(after)
l_tot = l_before + l_after
both = c(before, after)
shuffled = sample(both, size=l_tot, replace = FALSE)
new_before = shuffled[1:l_before]
new_after = shuffled[(l_before + 1): l_tot]
return(mean(new_before) - mean(new_after))
}
NMC = 1e4
tests = rep(0, NMC)
for (i in 1:NMC) {
tests[i] = shuffle()
}
hist(tests)
abline( v=observed, lw=3, col='red' )
# Write a function to reshuffle the data, and produce a difference in means
observed = mean(before) - mean(after)
shuffle = function() {
l_before = length(before)
l_after = length(after)
l_tot = l_before + l_after
both = c(before, after)
shuffled = sample(both, size=l_tot, replace = FALSE)
new_before = shuffled[1:l_before]
new_after = shuffled[(l_before + 1): l_tot]
return(mean(new_before) - mean(new_after))
}
NMC = 1e4
tests = rep(0, NMC)
for (i in 1:NMC) {
tests[i] = shuffle()
}
hist(tests)
abline( v=observed, lw=3, col='red' )
# Write a function to reshuffle the data, and produce a difference in means
observed = mean(before) - mean(after)
shuffle = function() {
l_before = length(before)
l_after = length(after)
l_tot = l_before + l_after
both = c(before, after)
shuffled = sample(both, size=l_tot, replace = FALSE)
new_before = shuffled[1:l_before]
new_after = shuffled[(l_before + 1): l_tot]
return(mean(new_before) - mean(new_after))
}
NMC = 1e4
tests = rep(0, NMC)
for (i in 1:NMC) {
tests[i] = shuffle()
}
hist(tests)
abline( v=observed, lw=3, col='red' )
# Write a function to reshuffle the data, and produce a difference in means
observed = mean(before) - mean(after)
shuffle = function() {
l_before = length(before)
l_after = length(after)
l_tot = l_before + l_after
both = c(before, after)
shuffled = sample(both, size=l_tot, replace = FALSE)
new_before = shuffled[1:l_before]
new_after = shuffled[(l_before + 1): l_tot]
return(mean(new_before) - mean(new_after))
}
NMC = 1e4
tests = rep(0, NMC)
for (i in 1:NMC) {
tests[i] = shuffle()
}
hist(tests)
abline( v=observed, lw=3, col='red' )
# Write a function to reshuffle the data, and produce a difference in means
observed = mean(before) - mean(after)
shuffle = function() {
l_before = length(before)
l_after = length(after)
l_tot = l_before + l_after
both = c(before, after)
shuffled = sample(both, size=l_tot, replace = FALSE)
new_before = shuffled[1:l_before]
new_after = shuffled[(l_before + 1): l_tot]
return(mean(new_before) - mean(new_after))
}
NMC = 1e4
tests = rep(0, NMC)
for (i in 1:NMC) {
tests[i] = shuffle()
}
hist(tests) # histogram
abline( v=observed, lw=3, col='red' ) # draw line at observed value
# find p-value
p_val = sum(tests >= observed)/NMC
# Write a function to reshuffle the data, and produce a difference in means
observed = mean(before) - mean(after)
shuffle = function() {
l_before = length(before)
l_after = length(after)
l_tot = l_before + l_after
both = c(before, after)
shuffled = sample(both, size=l_tot, replace = FALSE)
new_before = shuffled[1:l_before]
new_after = shuffled[(l_before + 1): l_tot]
return(mean(new_before) - mean(new_after))
}
NMC = 1e4
tests = rep(0, NMC)
for (i in 1:NMC) {
tests[i] = shuffle()
}
hist(tests) # histogram
abline( v=observed, lw=3, col='red' ) # draw line at observed value
# find p-value
p_val = sum(tests >= observed)/NMC
p_val
# Write a function to reshuffle the data, and produce a difference in means
observed = mean(before) - mean(after)
shuffle = function() {
l_before = length(before)
l_after = length(after)
l_tot = l_before + l_after
both = c(before, after)
shuffled = sample(both, size=l_tot, replace = FALSE)
new_before = shuffled[1:l_before]
new_after = shuffled[(l_before + 1): l_tot]
return(mean(new_before) - mean(new_after))
}
NMC = 1e4
tests = rep(0, NMC)
for (i in 1:NMC) {
tests[i] = shuffle()
}
hist(tests) # histogram
abline( v=observed, lw=3, col='red' ) # draw line at observed value
# find p-value
p_val = sum(tests >= observed)/NMC
p_val
# Write a function to reshuffle the data, and produce a difference in means
observed = mean(before) - mean(after)
shuffle = function() {
l_before = length(before)
l_after = length(after)
l_tot = l_before + l_after
both = c(before, after)
shuffled = sample(both, size=l_tot, replace = FALSE)
new_before = shuffled[1:l_before]
new_after = shuffled[(l_before + 1): l_tot]
return(mean(new_before) - mean(new_after))
}
NMC = 1e5
tests = rep(0, NMC)
for (i in 1:NMC) {
tests[i] = shuffle()
}
hist(tests) # histogram
abline( v=observed, lw=3, col='red' ) # draw line at observed value
# find p-value
p_val = sum(tests >= observed)/NMC
p_val
# Write a function to reshuffle the data, and produce a difference in means
observed = mean(before) - mean(after)
shuffle = function() {
l_before = length(before)
l_after = length(after)
l_tot = l_before + l_after
both = c(before, after)
shuffled = sample(both, size=l_tot, replace = FALSE)
new_before = shuffled[1:l_before]
new_after = shuffled[(l_before + 1): l_tot]
return(mean(new_before) - mean(new_after))
}
NMC = 1e5
tests = rep(0, NMC)
for (i in 1:NMC) {
tests[i] = shuffle()
}
hist(tests) # histogram
abline( v=observed, lw=3, col='red' ) # draw line at observed value
# find p-value
p_val = sum(tests >= observed)/NMC
p_val
# Write a function to reshuffle the data, and produce a difference in means
observed = mean(before) - mean(after)
shuffle = function() {
l_before = length(before)
l_after = length(after)
l_tot = l_before + l_after
both = c(before, after)
shuffled = sample(both, size=l_tot, replace = FALSE)
new_before = shuffled[1:l_before]
new_after = shuffled[(l_before + 1): l_tot]
return(mean(new_before) - mean(new_after))
}
NMC = 1e6
tests = rep(0, NMC)
for (i in 1:NMC) {
tests[i] = shuffle()
}
hist(tests) # histogram
abline( v=observed, lw=3, col='red' ) # draw line at observed value
# find p-value
p_val = sum(tests >= observed)/NMC
p_val
knitr::opts_chunk$set(echo=T,eval=T,message=F,warning=F,fig.align='center')
# Let 2011-2022 == 1-12
q1 = function () {
s = sample(12, 12, replace = FALSE)
if (sum(s[5:12]) == sum(5:12)){
return (TRUE)
} else{
return (FALSE)
}
}
NMC = 1e5
res = replicate(NMC, q1())
sum(res == TRUE)/NMC
deck = rep(1:13,each=4)
deck
# 1. A hand with all 5 cards having different ranks
diff_ranks = function(m) {
results = c()
for (i in 1:m) {
hand = sample(deck, 5)
dupes = data.frame(table(hand))
if (length(table(dupes$Freq)) > 1) {
results = append(results, 1)
} else{
results = append(results, 0)
}
}
return (sum(results == 0) / m)
}
# Results show about 50% of the time the cards are all different ranks
diff_ranks(1e5)
# Write a function to reshuffle the data, and produce a difference in means
observed = mean(before) - mean(after)
shuffle = function() {
l_before = length(before)
l_after = length(after)
l_tot = l_before + l_after
both = c(before, after)
shuffled = sample(both, size=l_tot, replace = FALSE)
new_before = shuffled[1:l_before]
new_after = shuffled[(l_before + 1): l_tot]
return(mean(new_before) - mean(new_after))
}
NMC = 1e5
tests = rep(0, NMC)
for (i in 1:NMC) {
tests[i] = shuffle()
}
hist(tests) # histogram
abline( v=observed, lw=3, col='red' ) # draw line at observed value
# find p-value
p_val = sum(tests >= observed)/NMC
p_val
knitr::opts_chunk$set(echo = TRUE,message=FALSE)
library(tidyverse)
library(kableExtra)
game_data = read_csv("./logs/gl2022.csv", col_names = FALSE)
game_log_header = read_csv("https://raw.githubusercontent.com/maxtoki/baseball_R/master/data/game_log_header.csv", col_names = FALSE)
colnames(game_data) = game_log_header
game_data = game_data %>% rename(HomeRunsScored = HomeRunsScore) # fix error in name
# Fix some errors in the data
game_data = game_data %>%
mutate(HomeTeamLeague = replace(HomeTeamLeague, HomeTeamLeague == 'NL.1', 'NL'))
# Make the date format more readable
game_data[["Date"]] = as.Date(as.character(game_data[["Date"]]), "%Y%m%d")
# Create an ID number for each game in order to reference back to games.
ids = seq(1:as.integer(count(game_data)))
game_data = game_data %>%
mutate(ID = ids) %>%
relocate(ID, .after = Date)
games_q1 = game_data %>%
select(Date, VisitingTeam, VisitingTeamLeague, HomeTeam, HomeTeamLeague, VisitorRunsScored, HomeRunsScored, ID)
head(games_q1) %>%
kbl() %>%
kable_styling(c("striped", "hover"))
runs_scored_as_home = game_data %>%
group_by(HomeTeam) %>%
summarize(runs_scored = sum(HomeRunsScored)) %>%
rename(Team = HomeTeam)
runs_scored_as_vis = game_data %>%
group_by(VisitingTeam) %>%
summarize(runs_scored = sum(VisitorRunsScored)) %>%
rename(Team = VisitingTeam)
total_scored = merge(runs_scored_as_home, runs_scored_as_home, by = "Team") %>%
mutate(total_runs_scored = runs_scored.x + runs_scored.y) %>%
select(Team, total_runs_scored)
avg_scored_per_game = total_scored %>%
mutate(avg_runs_scored = total_runs_scored/162) %>%
select(Team, avg_runs_scored) %>%
arrange(desc(avg_runs_scored))
max_runs_scored = max(avg_scored_per_game$avg_runs_scored)
ggplot(avg_scored_per_game, aes(reorder(Team, -avg_runs_scored), avg_runs_scored)) +
geom_col(fill = "lightblue", color="black", width = 0.75) +
geom_text(aes(label = Team), hjust = -0.2, color= "black", angle = 90, size = 3.5) +
ylim(0, max_runs_scored + 1) +
theme(axis.text.x = element_blank(), axis.ticks.x = element_blank()) +
xlab("Team") +
ylab("Average Runs Scored")
visitors_more_than_8_runs = games_q1 %>%
filter(VisitorRunsScored > 8) %>%
select(Date, VisitingTeam, VisitingTeamLeague, VisitorRunsScored, ID)
home_more_than_8_runs = games_q1 %>%
filter(HomeRunsScored > 8) %>%
select(Date, HomeTeam, HomeTeamLeague, HomeRunsScored, ID)
runs_scored_next_game = function(game_id, team) {
if (game_id < 1 | game_id > as.integer(count(games_q1))){
stop("Invalid ID Number.")
}
if (!(team %in% games_q1$HomeTeam) || !(team %in% games_q1$VisitingTeam)) {
stop("Team not found.")
}
current_game = games_q1 %>%
filter(ID == game_id)
if (!(team %in% current_game$HomeTeam) && !(team %in% current_game$VisitingTeam)) {
stop("This team did not play in this game.")
}
# The next game is the next row in the table after 24 that has the team as one of the two teams listed.
next_games = games_q1 %>%
filter(ID > game_id & (HomeTeam == team | VisitingTeam == team))
next_game = c(head(next_games, 1))
if (length(next_game$HomeTeam) == 0){
return(NA)
}
runs_scored_in_game = NULL
if (team == next_game$HomeTeam) {
runs_scored_in_game = next_game$HomeRunsScored
} else if (team == next_game$VisitingTeam) {
runs_scored_in_game = next_game$VisitorRunsScored
}
return (runs_scored_in_game)
}
# Rename columns in both dataframes, and add column for home or visitor
home_more_than_8_runs = home_more_than_8_runs %>%
rename(Team = HomeTeam, League = HomeTeamLeague, RunsScored = HomeRunsScored) %>%
mutate("H/V" = "H")
visitors_more_than_8_runs = visitors_more_than_8_runs %>%
rename(Team = VisitingTeam, League = VisitingTeamLeague, RunsScored = VisitorRunsScored) %>%
mutate("H/V" = "V")
# Combine data into one dataframe
more_than_8_runs = rbind(home_more_than_8_runs, visitors_more_than_8_runs) %>% arrange(Date)
# mutate a new column, and call the function we made
vectorized_func = Vectorize(runs_scored_next_game)
runs_inc_next_game = more_than_8_runs %>%
mutate(RunsNextGame = vectorized_func(ID, Team))
# NOTE! If the runs scored next game column contains an NA, that means that was the last game of the season for that team.
# Here are the first few rows
head(runs_inc_next_game) %>%
kbl() %>%
kable_styling(c("striped", "hover"))
by_team = runs_inc_next_game %>%
drop_na() %>%
group_by(Team) %>%
summarize(AvgNextGame = round(mean(RunsNextGame), 3)) %>%
rename(Group = Team) %>%
arrange(desc(AvgNextGame))
mlb = runs_inc_next_game %>%
drop_na() %>%
summarize(AvgNextGame = round(mean(RunsNextGame), 3)) %>%
mutate(Group = "MLB AVG") %>%
relocate(Group, .before = AvgNextGame)
by_league = runs_inc_next_game %>%
drop_na() %>%
group_by(League) %>%
summarize(AvgNextGame = round(mean(RunsNextGame), 3)) %>%
rename(Group = League) %>%
arrange(desc(AvgNextGame))
Avg_NextGame_All = rbind(mlb, by_league, by_team)
# Final Output
ggplot(Avg_NextGame_All, aes(x = reorder(Group, -AvgNextGame), y =AvgNextGame)) + geom_col(fill = "lightblue", color="black", width = 0.75) +
geom_text(aes(label = Group), hjust = -0.2, color= "black", angle = 90, size = 3.5) +
ylim(0, max_runs_scored + 1) +
theme(axis.text.x = element_blank(), axis.ticks.x = element_blank()) +
xlab("Team") +
ylab("Average Runs Scored in Next Game")
# Get teams, add ranks for avg next game
avg_next_game_ranks = Avg_NextGame_All %>%
filter(!(Group %in% c("MLB AVG", "NL", "AL"))) %>%
rename(Team = Group) %>%
mutate(Rank = 1:length(Team))
# Get teams, add rank for total run scoring
avg_scored_per_game_ranks = avg_scored_per_game %>%
mutate(Rank = 1:length(Team))
rank_diffs = avg_next_game_ranks %>% inner_join(avg_scored_per_game_ranks, by = "Team") %>% mutate(RankDiff = Rank.y - Rank.x) %>% select(Team, RankDiff) %>% arrange(desc(RankDiff))
rank_diffs %>%
mutate(RankDiff = cell_spec(RankDiff, color = ifelse(RankDiff > 0, "green", "red"))) %>%
kbl(escape = FALSE) %>%
kable_styling(c("striped", "hover"))
avg_next_game_ranks
Avg_NextGame_All
runs_combined = avg_next_game_ranks %>% inner_join(avg_scored_per_game_ranks, by = "Team")
runs_combined = avg_next_game_ranks %>% inner_join(avg_scored_per_game_ranks, by = "Team")
runs_combined
runs_combined = avg_next_game_ranks %>% inner_join(avg_scored_per_game_ranks, by = "Team") %>% select(Team, avg_runs_scored, AvgNextGame)
runs_combined
runs_combined = avg_next_game_ranks %>% inner_join(avg_scored_per_game_ranks, by = "Team") %>% select(Team, avg_runs_scored, AvgNextGame)
ggplot(runs_combined, aes(x = AvgNextGame, y = avg_runs_scored))
runs_combined = avg_next_game_ranks %>% inner_join(avg_scored_per_game_ranks, by = "Team") %>% select(Team, avg_runs_scored, AvgNextGame)
ggplot(runs_combined, aes(x = AvgNextGame, y = avg_runs_scored)) %>%
geom_point()
runs_combined = avg_next_game_ranks %>% inner_join(avg_scored_per_game_ranks, by = "Team") %>% select(Team, avg_runs_scored, AvgNextGame)
ggplot(runs_combined, aes(x = AvgNextGame, y = avg_runs_scored)) +
geom_point()
runs_combined = avg_next_game_ranks %>% inner_join(avg_scored_per_game_ranks, by = "Team") %>% select(Team, avg_runs_scored, AvgNextGame)
ggplot(runs_combined, aes(x = AvgNextGame, y = avg_runs_scored)) +
geom_point(color = "lightblue")
runs_combined = avg_next_game_ranks %>% inner_join(avg_scored_per_game_ranks, by = "Team") %>% select(Team, avg_runs_scored, AvgNextGame)
ggplot(runs_combined, aes(x = AvgNextGame, y = avg_runs_scored)) +
geom_point(color = "blue")
runs_combined = avg_next_game_ranks %>% inner_join(avg_scored_per_game_ranks, by = "Team") %>% select(Team, avg_runs_scored, AvgNextGame)
ggplot(runs_combined, aes(x = AvgNextGame, y = avg_runs_scored)) +
geom_point(color = "blue", size =3)
runs_combined = avg_next_game_ranks %>% inner_join(avg_scored_per_game_ranks, by = "Team") %>% select(Team, avg_runs_scored, AvgNextGame)
ggplot(runs_combined, aes(x = AvgNextGame, y = avg_runs_scored)) +
geom_point(color = "blue", size =2)
runs_combined = avg_next_game_ranks %>% inner_join(avg_scored_per_game_ranks, by = "Team") %>% select(Team, avg_runs_scored, AvgNextGame)
ggplot(runs_combined, aes(x = AvgNextGame, y = avg_runs_scored)) +
geom_point(color = "blue", size = 1)
knitr::opts_chunk$set(echo = TRUE,message=FALSE)
library(tidyverse)
library(kableExtra)
library(ggrepel)
runs_combined = avg_next_game_ranks %>% inner_join(avg_scored_per_game_ranks, by = "Team") %>% select(Team, avg_runs_scored, AvgNextGame)
ggplot(runs_combined, aes(x = AvgNextGame, y = avg_runs_scored)) +
geom_point(color = "blue", size = 1) %>%
geom_label_repel(aes(label = Team))
runs_combined = avg_next_game_ranks %>% inner_join(avg_scored_per_game_ranks, by = "Team") %>% select(Team, avg_runs_scored, AvgNextGame)
ggplot(runs_combined, aes(x = AvgNextGame, y = avg_runs_scored)) +
geom_point(color = "blue", size = 1) +
geom_label_repel(aes(label = Team))
runs_combined = avg_next_game_ranks %>% inner_join(avg_scored_per_game_ranks, by = "Team") %>% select(Team, avg_runs_scored, AvgNextGame)
ggplot(runs_combined, aes(x = AvgNextGame, y = avg_runs_scored)) +
geom_point(color = "blue", size = 1) +
geom_label_repel(aes(label = Team)) + theme_classic
runs_combined = avg_next_game_ranks %>% inner_join(avg_scored_per_game_ranks, by = "Team") %>% select(Team, avg_runs_scored, AvgNextGame)
ggplot(runs_combined, aes(x = AvgNextGame, y = avg_runs_scored)) +
geom_point(color = "blue", size = 1) +
geom_label_repel(aes(label = Team)) + theme_classic()
runs_combined = avg_next_game_ranks %>% inner_join(avg_scored_per_game_ranks, by = "Team") %>% select(Team, avg_runs_scored, AvgNextGame)
ggplot(runs_combined, aes(x = AvgNextGame, y = avg_runs_scored)) +
geom_point(color = "blue", size = 1) +
geom_label_repel(aes(label = Team)) + theme_minimal()
runs_combined = avg_next_game_ranks %>% inner_join(avg_scored_per_game_ranks, by = "Team") %>% select(Team, avg_runs_scored, AvgNextGame)
ggplot(runs_combined, aes(x = AvgNextGame, y = avg_runs_scored)) +
geom_point(color = "blue", size = 1) +
geom_label_repel(aes(label = Team)) + theme_classic()
runs_combined = avg_next_game_ranks %>% inner_join(avg_scored_per_game_ranks, by = "Team") %>% select(Team, avg_runs_scored, AvgNextGame)
ggplot(runs_combined, aes(x = AvgNextGame, y = avg_runs_scored)) +
geom_point(color = "blue", size = 1) +
geom_label_repel(aes(label = Team), box.padding = 0.35) + theme_classic()
runs_combined = avg_next_game_ranks %>% inner_join(avg_scored_per_game_ranks, by = "Team") %>% select(Team, avg_runs_scored, AvgNextGame)
ggplot(runs_combined, aes(x = AvgNextGame, y = avg_runs_scored)) +
geom_point(color = "blue", size = 1) +
geom_label_repel(aes(label = Team), box.padding = 0.35, point.padding = 0.5) + theme_classic()
runs_combined = avg_next_game_ranks %>% inner_join(avg_scored_per_game_ranks, by = "Team") %>% select(Team, avg_runs_scored, AvgNextGame)
ggplot(runs_combined, aes(x = AvgNextGame, y = avg_runs_scored)) +
geom_point(color = "blue", size = 1) +
geom_label_repel(aes(label = Team), box.padding = 0.35, point.padding = 0.5, segment.color = 'grey50') + theme_classic()
setwd("~/Personal/mlb/gamelogs")
